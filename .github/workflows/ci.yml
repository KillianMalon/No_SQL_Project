name: Node.js CI

on:
  push:
  
    branches: [main, develop]
    tags:
      - v*  # Déclencher le workflow pour les tags commençant par 'v
  pull_request:
    branches: [main]

permissions:
  contents: read
  checks: write

jobs:
  
  lint:
      runs-on: self-hosted
      steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x' # ou une autre version spécifique

      - name: Install dependencies
        run: |
          cd Interface/API
          npm install

      - name: Lint JavaScript Code
        run: |
          cd Interface/API
          npx eslint .
  
      # - name: Lint Dockerfile
      #   uses: hadolint/hadolint-action@v1.5.0
      #   with:
      #     dockerfile: "./Dockerfile"
        
      - name: Audit Dependencies
        run: |
          cd Interface/API
          npm audit
  test:
    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [18.x, 16.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: |
        cd Interface/API
        npm install

    - name: Run Unit tests
      run: |
        cd Interface/API
        npm run test:unit -- --coverage  # Assurez-vous que votre script npm test génère des informations de couverture

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2  # Utilisation de la version 2 de l'action codecov
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: './Interface/API/coverage/lcov.info'  # Assurez-vous que le chemin d'accès au fichier lcov.info est correct
        flags: unittests  # Optionnel: ajoute des flags pour identifier le contexte des tests
        name: codecov-umbrella  # Optionnel: donne un nom spécifique au téléversement pour faciliter l'identification
        verbose: true  # Pour plus de détails dans les logs si nécessaire

    - name: Start application
      run: |
        cd Interface/API
        npm start &
      env:
        NODE_ENV: test
        PORT: 8080
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
 
    - name: Wait for application to be available
      run: |
        # Wait for up to 60 seconds for the web aplication to be available
        timeout 60s bash -c 'until curl -sSf http://localhost:8080; do sleep 5; done'

    - name: Run Graphic & Integration tests (Cypress)
      run: |
        cd Interface/API
        npx cypress run
      env:
        CYPRESS_baseUrl: http://localhost:8080
        PORT: 8080
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
    environment: Test

  report:
    needs: [test, lint]
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [18.x, 16.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: |
        cd Interface/API
        npm install
    
    - name: Run Unit tests
      run: |
        cd Interface/API
        npm run test:view -- --reporter json > test-results.json
    - name: Workflow test
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Resultats des tests
        path: '**/test-results.json'
        reporter: mocha-json 


  build:
    name: Build and analyze
    runs-on: ubuntu-latest
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18.x'

      - name: Get commit details
        run: |
          echo "COMMIT_AUTHOR_NAME=$(git log -1 --format='%an')" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR_EMAIL=$(git log -1 --format='%ae')" >> $GITHUB_ENV
          
      - name: Display commit details
        run: |
          echo "Author Name: $COMMIT_AUTHOR_NAME"
          echo "Author Email: $COMMIT_AUTHOR_EMAIL"


      - name: Install dependencies
        run: |
          cd Interface/API
          npm install
      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          args: >
            -Dsonar.projectBaseDir=./Interface/API
            -Dsonar.projectKey=KillianMalon_No_SQL_Project_8d0af7ad-c632-4f98-bd1d-258a45702f9a
            -Dsonar.projectAuthor="$COMMIT_AUTHOR_NAME"
            -Dsonar.projectEmail="$COMMIT_AUTHOR_EMAIL" 
            -X 
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} 
          COMMIT_AUTHOR_NAME: ${{ env.COMMIT_AUTHOR_NAME }}
          COMMIT_AUTHOR_EMAIL: ${{ env.COMMIT_AUTHOR_EMAIL }}

      # Uncomment these lines if you want to fail the build when the Quality Gate fails
      # - name: Check Quality Gate
      #   uses: sonarsource/sonarqube-quality-gate-action@master
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    needs: [test, build, lint, report]
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main'  # Déclencher ce job uniquement pour la branche main

    steps:
    - name: Checkout repository 
      uses: actions/checkout@v2

    - name: Install SSH key
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} 
        
    - name: Deploy to Server (Raspberry Pi)
      run: |
        ssh -o StrictHostKeyChecking=no deployer@176.160.95.82 << 'EOF'
          export PATH=$PATH:/opt/node-v16.6.2-linux-armv7l/bin
          cd /var/www/html/britto
          git fetch origin main
          git reset --hard origin/main
          cd Interface/API
          npm install --production
          pm2 restart britto || pm2 start npm --name "britto" -- start

    - name: Notify Discord on Deployment Success
      if: success()
      uses: tsickert/discord-webhook@v5.3.0
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
        username: 'Deployment Bot'
        content: 'Deployment to Raspberry Pi was successful! 🚀'

    - name: Notify Discord on Deployment Failure
      if: failure()
      uses: tsickert/discord-webhook@v5.3.0
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
        username: 'Deployment Bot'
        content: 'Deployment to Raspberry Pi failed! ❌ Check the logs for more details.'

    environment: Test 
        
  Build_and_Push_Docker_Image:

    needs: [test, build, lint, report, deploy]
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t myapp:${{ github.sha }} .

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./Interface/API
          file: ./Interface/API/Dockerfile
          push: true
          tags: yourusername/yourappname:latest
          build_args: |
            NODE_VERSION=18.x
            PORT=8080
            DATABASE_URL=$DATABASE_URL
